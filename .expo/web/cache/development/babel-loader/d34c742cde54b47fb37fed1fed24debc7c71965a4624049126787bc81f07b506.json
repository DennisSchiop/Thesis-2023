{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"mode\", \"children\", \"icon\", \"avatar\", \"selected\", \"disabled\", \"accessibilityLabel\", \"closeIconAccessibilityLabel\", \"onPress\", \"onLongPress\", \"delayLongPress\", \"onClose\", \"closeIcon\", \"textStyle\", \"style\", \"theme\", \"testID\", \"selectedColor\", \"showSelectedOverlay\", \"ellipsizeMode\", \"compact\", \"elevated\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport { white } from \"../../styles/themes/v2/colors\";\nimport Icon from \"../Icon\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport Surface from \"../Surface\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { getChipColors } from \"./helpers\";\nvar Chip = function Chip(_ref) {\n  var _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'flat' : _ref$mode,\n    children = _ref.children,\n    icon = _ref.icon,\n    avatar = _ref.avatar,\n    _ref$selected = _ref.selected,\n    selected = _ref$selected === void 0 ? false : _ref$selected,\n    _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    accessibilityLabel = _ref.accessibilityLabel,\n    _ref$closeIconAccessi = _ref.closeIconAccessibilityLabel,\n    closeIconAccessibilityLabel = _ref$closeIconAccessi === void 0 ? 'Close' : _ref$closeIconAccessi,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    delayLongPress = _ref.delayLongPress,\n    onClose = _ref.onClose,\n    closeIcon = _ref.closeIcon,\n    textStyle = _ref.textStyle,\n    style = _ref.style,\n    themeOverrides = _ref.theme,\n    _ref$testID = _ref.testID,\n    testID = _ref$testID === void 0 ? 'chip' : _ref$testID,\n    selectedColor = _ref.selectedColor,\n    _ref$showSelectedOver = _ref.showSelectedOverlay,\n    showSelectedOverlay = _ref$showSelectedOver === void 0 ? false : _ref$showSelectedOver,\n    ellipsizeMode = _ref.ellipsizeMode,\n    compact = _ref.compact,\n    _ref$elevated = _ref.elevated,\n    elevated = _ref$elevated === void 0 ? false : _ref$elevated,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var isV3 = theme.isV3;\n  var _React$useRef = React.useRef(new Animated.Value(isV3 && elevated ? 1 : 0)),\n    elevation = _React$useRef.current;\n  var isOutlined = mode === 'outlined';\n  var handlePressIn = function handlePressIn() {\n    var scale = theme.animation.scale;\n    Animated.timing(elevation, {\n      toValue: isV3 ? elevated ? 2 : 0 : 4,\n      duration: 200 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n  var handlePressOut = function handlePressOut() {\n    var scale = theme.animation.scale;\n    Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n  var opacity = isV3 ? 0.38 : 0.26;\n  var defaultBorderRadius = isV3 ? 8 : 16;\n  var iconSize = isV3 ? 18 : 16;\n  var _ref2 = StyleSheet.flatten(style) || {},\n    customBackgroundColor = _ref2.backgroundColor,\n    _ref2$borderRadius = _ref2.borderRadius,\n    borderRadius = _ref2$borderRadius === void 0 ? defaultBorderRadius : _ref2$borderRadius;\n  var _getChipColors = getChipColors({\n      isOutlined: isOutlined,\n      theme: theme,\n      selectedColor: selectedColor,\n      showSelectedOverlay: showSelectedOverlay,\n      customBackgroundColor: customBackgroundColor,\n      disabled: disabled\n    }),\n    borderColor = _getChipColors.borderColor,\n    textColor = _getChipColors.textColor,\n    iconColor = _getChipColors.iconColor,\n    underlayColor = _getChipColors.underlayColor,\n    selectedBackgroundColor = _getChipColors.selectedBackgroundColor,\n    backgroundColor = _getChipColors.backgroundColor;\n  var accessibilityState = {\n    selected: selected,\n    disabled: disabled\n  };\n  var elevationStyle = isV3 || Platform.OS === 'android' ? elevation : 0;\n  var multiplier = isV3 ? compact ? 1.5 : 2 : 1;\n  var labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft: avatar || icon || selected ? 4 * multiplier : 8 * multiplier\n  };\n  var contentSpacings = {\n    paddingRight: isV3 ? onClose ? 34 : 0 : onClose ? 32 : 4\n  };\n  var labelTextStyle = _objectSpread({\n    color: textColor\n  }, isV3 ? theme.fonts.labelLarge : theme.fonts.regular);\n  return React.createElement(Surface, _extends({\n    style: [styles.container, isV3 && (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer), !theme.isV3 && {\n      elevation: elevationStyle\n    }, {\n      backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n      borderColor: borderColor,\n      borderRadius: borderRadius\n    }, style]\n  }, theme.isV3 && {\n    elevation: elevationStyle\n  }, rest, {\n    testID: testID + \"-container\",\n    theme: theme\n  }), React.createElement(TouchableRipple, {\n    borderless: true,\n    style: [{\n      borderRadius: borderRadius\n    }, styles.touchable],\n    onPress: onPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    onLongPress: onLongPress,\n    delayLongPress: delayLongPress,\n    underlayColor: underlayColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    accessibilityState: accessibilityState,\n    testID: testID,\n    theme: theme\n  }, React.createElement(View, {\n    style: [styles.content, isV3 && styles.md3Content, contentSpacings]\n  }, avatar && !icon ? React.createElement(View, {\n    style: [styles.avatarWrapper, isV3 && styles.md3AvatarWrapper, disabled && {\n      opacity: opacity\n    }]\n  }, React.isValidElement(avatar) ? React.cloneElement(avatar, {\n    style: [styles.avatar, avatar.props.style]\n  }) : avatar) : null, icon || selected ? React.createElement(View, {\n    style: [styles.icon, isV3 && styles.md3Icon, avatar ? [styles.avatar, styles.avatarSelected, isV3 && selected && styles.md3SelectedIcon] : null]\n  }, icon ? React.createElement(Icon, {\n    source: icon,\n    color: avatar ? white : !disabled && theme.isV3 ? theme.colors.primary : iconColor,\n    size: 18,\n    theme: theme\n  }) : React.createElement(MaterialCommunityIcon, {\n    name: \"check\",\n    color: avatar ? white : iconColor,\n    size: 18,\n    direction: \"ltr\"\n  })) : null, React.createElement(Text, {\n    variant: \"labelLarge\",\n    selectable: false,\n    numberOfLines: 1,\n    style: [isV3 ? styles.md3LabelText : styles.labelText, labelTextStyle, labelSpacings, textStyle],\n    ellipsizeMode: ellipsizeMode\n  }, children))), onClose ? React.createElement(View, {\n    style: styles.closeButtonStyle\n  }, React.createElement(TouchableWithoutFeedback, {\n    onPress: onClose,\n    accessibilityRole: \"button\",\n    accessibilityLabel: closeIconAccessibilityLabel\n  }, React.createElement(View, {\n    style: [styles.icon, styles.closeIcon, isV3 && styles.md3CloseIcon]\n  }, closeIcon ? React.createElement(Icon, {\n    source: closeIcon,\n    color: iconColor,\n    size: iconSize\n  }) : React.createElement(MaterialCommunityIcon, {\n    name: isV3 ? 'close' : 'close-circle',\n    size: iconSize,\n    color: iconColor,\n    direction: \"ltr\"\n  })))) : null);\n};\nvar styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({\n      default: 'column',\n      web: 'row'\n    })\n  },\n  md3OutlineContainer: {\n    borderWidth: 1\n  },\n  md3FlatContainer: {\n    borderWidth: 0\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1\n  },\n  md3Content: {\n    paddingLeft: 0\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center'\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0\n  },\n  closeIcon: {\n    marginRight: 4\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0\n  },\n  labelText: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  md3LabelText: {\n    textAlignVertical: 'center',\n    marginVertical: 6\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  touchable: {\n    flexGrow: 1\n  }\n});\nexport default Chip;","map":{"version":3,"names":["React","Animated","Platform","StyleSheet","TouchableWithoutFeedback","View","useInternalTheme","white","Icon","MaterialCommunityIcon","Surface","TouchableRipple","Text","getChipColors","Chip","_ref","_ref$mode","mode","children","icon","avatar","_ref$selected","selected","_ref$disabled","disabled","accessibilityLabel","_ref$closeIconAccessi","closeIconAccessibilityLabel","onPress","onLongPress","delayLongPress","onClose","closeIcon","textStyle","style","themeOverrides","theme","_ref$testID","testID","selectedColor","_ref$showSelectedOver","showSelectedOverlay","ellipsizeMode","compact","_ref$elevated","elevated","rest","_objectWithoutProperties","_excluded","isV3","_React$useRef","useRef","Value","elevation","current","isOutlined","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","opacity","defaultBorderRadius","iconSize","_ref2","flatten","customBackgroundColor","backgroundColor","_ref2$borderRadius","borderRadius","_getChipColors","borderColor","textColor","iconColor","underlayColor","selectedBackgroundColor","accessibilityState","elevationStyle","OS","multiplier","labelSpacings","marginRight","marginLeft","contentSpacings","paddingRight","labelTextStyle","_objectSpread","color","fonts","labelLarge","regular","createElement","_extends","styles","container","md3OutlineContainer","md3FlatContainer","borderless","touchable","onPressIn","onPressOut","accessibilityRole","content","md3Content","avatarWrapper","md3AvatarWrapper","isValidElement","cloneElement","props","md3Icon","avatarSelected","md3SelectedIcon","source","colors","primary","size","name","direction","variant","selectable","numberOfLines","md3LabelText","labelText","closeButtonStyle","md3CloseIcon","create","borderWidth","hairlineWidth","borderStyle","flexDirection","select","default","web","alignItems","paddingLeft","position","flexGrow","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent"],"sources":["C:\\Users\\Sinned\\AwesomeProject\\node_modules\\react-native-paper\\src\\components\\Chip\\Chip.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  Animated,\n  GestureResponderEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { EllipsizeProp, ThemeProp } from '../../types';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { getChipColors } from './helpers';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Icon to display as the close button for the `Chip`. The icon appears only when the onClose prop is specified.\n   */\n  closeIcon?: IconSource;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   * Note: With theme version 3 `selectedColor` doesn't apply to the `icon`.\n   *       If you want specify custom color for the `icon`, render your own `Icon` component.\n   */\n  selectedColor?: string;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether to display overlay on selected chip\n   */\n  showSelectedOverlay?: boolean;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Sets smaller horizontal paddings `12dp` around label, when there is only label.\n   */\n  compact?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether chip should have the elevation.\n   */\n  elevated?: boolean;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * The number of milliseconds a user must touch the element before executing `onLongPress`.\n   */\n  delayLongPress?: number;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: StyleProp<TextStyle>;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  delayLongPress,\n  onClose,\n  closeIcon,\n  textStyle,\n  style,\n  theme: themeOverrides,\n  testID = 'chip',\n  selectedColor,\n  showSelectedOverlay = false,\n  ellipsizeMode,\n  compact,\n  elevated = false,\n  ...rest\n}: Props) => {\n  const theme = useInternalTheme(themeOverrides);\n  const { isV3 } = theme;\n\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(isV3 && elevated ? 1 : 0)\n  );\n\n  const isOutlined = mode === 'outlined';\n\n  const handlePressIn = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: isV3 ? (elevated ? 2 : 0) : 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const opacity = isV3 ? 0.38 : 0.26;\n  const defaultBorderRadius = isV3 ? 8 : 16;\n  const iconSize = isV3 ? 18 : 16;\n\n  const {\n    backgroundColor: customBackgroundColor,\n    borderRadius = defaultBorderRadius,\n  } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const {\n    borderColor,\n    textColor,\n    iconColor,\n    underlayColor,\n    selectedBackgroundColor,\n    backgroundColor,\n  } = getChipColors({\n    isOutlined,\n    theme,\n    selectedColor,\n    showSelectedOverlay,\n    customBackgroundColor,\n    disabled,\n  });\n\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  const elevationStyle = isV3 || Platform.OS === 'android' ? elevation : 0;\n  const multiplier = isV3 ? (compact ? 1.5 : 2) : 1;\n  const labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft: avatar || icon || selected ? 4 * multiplier : 8 * multiplier,\n  };\n  const contentSpacings = {\n    paddingRight: isV3 ? (onClose ? 34 : 0) : onClose ? 32 : 4,\n  };\n  const labelTextStyle = {\n    color: textColor,\n    ...(isV3 ? theme.fonts.labelLarge : theme.fonts.regular),\n  };\n  return (\n    <Surface\n      style={[\n        styles.container,\n        isV3 &&\n          (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer),\n        !theme.isV3 && {\n          elevation: elevationStyle,\n        },\n        {\n          backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n          borderColor,\n          borderRadius,\n        },\n        style,\n      ]}\n      {...(theme.isV3 && { elevation: elevationStyle })}\n      {...rest}\n      testID={`${testID}-container`}\n      theme={theme}\n    >\n      <TouchableRipple\n        borderless\n        style={[{ borderRadius }, styles.touchable]}\n        onPress={onPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        onLongPress={onLongPress}\n        delayLongPress={delayLongPress}\n        underlayColor={underlayColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n        theme={theme}\n      >\n        <View\n          style={[styles.content, isV3 && styles.md3Content, contentSpacings]}\n        >\n          {avatar && !icon ? (\n            <View\n              style={[\n                styles.avatarWrapper,\n                isV3 && styles.md3AvatarWrapper,\n                disabled && { opacity },\n              ]}\n            >\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar as React.ReactElement<any>, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || selected ? (\n            <View\n              style={[\n                styles.icon,\n                isV3 && styles.md3Icon,\n                avatar\n                  ? [\n                      styles.avatar,\n                      styles.avatarSelected,\n                      isV3 && selected && styles.md3SelectedIcon,\n                    ]\n                  : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={\n                    avatar\n                      ? white\n                      : !disabled && theme.isV3\n                      ? theme.colors.primary\n                      : iconColor\n                  }\n                  size={18}\n                  theme={theme}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              isV3 ? styles.md3LabelText : styles.labelText,\n              labelTextStyle,\n              labelSpacings,\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View\n              style={[\n                styles.icon,\n                styles.closeIcon,\n                isV3 && styles.md3CloseIcon,\n              ]}\n            >\n              {closeIcon ? (\n                <Icon source={closeIcon} color={iconColor} size={iconSize} />\n              ) : (\n                <MaterialCommunityIcon\n                  name={isV3 ? 'close' : 'close-circle'}\n                  size={iconSize}\n                  color={iconColor}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          </TouchableWithoutFeedback>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({ default: 'column', web: 'row' }),\n  },\n  md3OutlineContainer: {\n    borderWidth: 1,\n  },\n  md3FlatContainer: {\n    borderWidth: 0,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1,\n  },\n  md3Content: {\n    paddingLeft: 0,\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0,\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0,\n  },\n  labelText: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  md3LabelText: {\n    textAlignVertical: 'center',\n    marginVertical: 6,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0,\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  touchable: {\n    flexGrow: 1,\n  },\n});\n\nexport default Chip;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}